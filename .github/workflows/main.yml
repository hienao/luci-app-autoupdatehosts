name: Build and Release

on:
  push:
    branches:
      - main
      - pre

# 添加权限配置
permissions:
  contents: write
  discussions: write

jobs:
  build_and_release:
    name: Build and Release
    runs-on: ubuntu-22.04
    steps:
      - name: Check Environment
        id: check_env
        run: |
          if [ "${{ secrets.IS_GITHUB_RUN }}" != "true" ]; then
            echo "非github环境，终止执行"
            exit 1
          fi

      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set Release Info
        id: release_info
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/pre" ]]; then
            TIMESTAMP=$(date +%Y%m%d%H%M%S)
            echo "RELEASE_VERSION=pre-$TIMESTAMP" >> $GITHUB_ENV
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
            echo "设置为预发布版本"
          else
            # 读取 version.txt 文件中的版本号
            if [ -f "version.txt" ]; then
              VERSION=$(cat version.txt | tr -d '[:space:]')
              if [ -n "$VERSION" ]; then
                echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
              else
                echo "version.txt 文件为空，使用默认版本号 v1.0.0"
                echo "RELEASE_VERSION=v1.0.0" >> $GITHUB_ENV
              fi
            else
              echo "未找到 version.txt 文件，使用默认版本号 v1.0.0"
              echo "RELEASE_VERSION=v1.0.0" >> $GITHUB_ENV
            fi
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
            echo "设置为正式版本: $VERSION"
          fi

      # 使用缓存加速依赖安装
      - name: Cache apt packages
        uses: actions/cache@v3
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-${{ hashFiles('**/package-list') }}

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends build-essential \
            libncurses5-dev libncursesw5-dev zlib1g-dev gawk git gettext \
            libssl-dev xsltproc rsync unzip

      # 缓存 SDK
      - name: Cache SDK
        id: cache-sdk
        uses: actions/cache@v3
        with:
          path: sdk
          key: ${{ runner.os }}-openwrt-sdk-22.03.5

      - name: Setup OpenWrt SDK
        if: steps.cache-sdk.outputs.cache-hit != 'true'
        run: |
          wget -q https://downloads.openwrt.org/releases/22.03.5/targets/x86/64/openwrt-sdk-22.03.5-x86-64_gcc-11.2.0_musl.Linux-x86_64.tar.xz
          tar xf openwrt-sdk-*.tar.xz
          mv openwrt-sdk-22.03.5-x86-64_gcc-11.2.0_musl.Linux-x86_64 sdk

      # 缓存 feeds
      - name: Cache feeds
        id: cache-feeds
        uses: actions/cache@v3
        with:
          path: sdk/feeds
          key: ${{ runner.os }}-feeds-${{ hashFiles('sdk/feeds.conf.default') }}

      - name: Setup SDK Environment
        run: |
          cd sdk
          if [ "${{ steps.cache-feeds.outputs.cache-hit }}" != 'true' ]; then
            ./scripts/feeds update -a
          fi
          ./scripts/feeds install -a
          ln -sf $GITHUB_WORKSPACE package/luci-app-autoupdatehosts

      - name: Build Package
        run: |
          cd sdk
          # 只清理包相关的缓存
          rm -rf bin/packages/*/base/luci-app-autoupdatehosts*
          rm -rf build_dir/target-*/luci-app-autoupdatehosts*
          rm -rf staging_dir/target-*/packages/luci-app-autoupdatehosts*
          rm -rf tmp/info/.files-packageinfo-*
          # 保留 dl/ 目录以缓存下载的依赖
          make defconfig
          make package/luci-app-autoupdatehosts/clean
          make package/luci-app-autoupdatehosts/compile V=s

      - name: Organize and Release
        run: |
          mkdir -p release
          find sdk/bin/packages/*/base/ -name "luci-app-autoupdatehosts*.ipk" -exec cp {} release/ \;
          find sdk/bin/packages/*/base/ -name "luci-i18n-autoupdatehosts*.ipk" -exec cp {} release/ \;
          echo "### LuCI App AutoUpdateHosts Release" > release.txt
          echo "包含以下文件：" >> release.txt
          ls -1 release/ >> release.txt

      # 添加清理步骤，在创建新发布之前执行
      - name: Delete Old Prereleases
        env:
          GH_TOKEN: ${{ secrets.REPO_TOKEN }}
        run: |
          # 获取所有预发布和草稿版本
          releases=$(gh api repos/${{ github.repository }}/releases \
            --jq '.[] | select(.prerelease or .draft) | .id')
          
          # 删除找到的版本
          for release_id in $releases; do
            echo "Deleting release ID: $release_id"
            gh api -X DELETE repos/${{ github.repository }}/releases/$release_id
          done

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
          body_path: release.txt
          prerelease: ${{ env.IS_PRERELEASE == 'true' }}
          draft: false
          tag_name: ${{ env.RELEASE_VERSION }}
          name: ${{ env.RELEASE_VERSION }}
          generate_release_notes: true
          fail_on_unmatched_files: false
          token: ${{ secrets.REPO_TOKEN }}

      - name: Generate translations
        run: |
          # 创建必要的目录
          mkdir -p po/zh-cn
          mkdir -p po/templates
          mkdir -p scripts
          
          # 获取 LuCI 的 i18n 工具
          wget https://raw.githubusercontent.com/openwrt/luci/master/build/i18n-scan.pl -O scripts/i18n-scan.pl
          wget https://raw.githubusercontent.com/openwrt/luci/master/build/i18n-update.pl -O scripts/i18n-update.pl
          
          chmod +x ./scripts/i18n-scan.pl
          chmod +x ./scripts/i18n-update.pl
          
          # 生成翻译模板
          ./scripts/i18n-scan.pl . > po/templates/autoupdatehosts.pot
          ./scripts/i18n-update.pl po/zh-cn/autoupdatehosts.po po/templates/autoupdatehosts.pot