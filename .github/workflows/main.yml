name: Build and Release

on:
  push:
    tags:
      - "v*"
      - "t*"
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write
  discussions: write

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/t')
    outputs:
      new_tag: ${{ steps.create_tag.outputs.new_tag }}
    steps:
      - name: Create New Tag
        id: create_tag
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          NEW_TAG="v0.1-$TIMESTAMP"
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          git tag $NEW_TAG
          git push origin $NEW_TAG

  build:
    name: Build OpenWrt LuCI App
    needs: [prepare]
    if: |
      always() &&
      (needs.prepare.result == 'success' || startsWith(github.ref, 'refs/tags/v'))
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Environment
        run: |
          if [ "${{ secrets.IS_GITHUB_RUN }}" != "true" ]; then
            echo "非github环境，终止执行"
            exit 1
          fi
          echo "github环境检查通过，继续执行"

      - name: Set Release Info
        id: release_info
        run: |
          if [[ "${{ github.ref }}" == refs/tags/t* ]]; then
            echo "RELEASE_VERSION=${{ needs.prepare.outputs.new_tag }}" >> $GITHUB_ENV
            echo "IS_PRERELEASE=true" >> $GITHUB_ENV
            echo "使用新生成的标签: ${{ needs.prepare.outputs.new_tag }}"
          else
            TAG_NAME=${GITHUB_REF#refs/tags/}
            echo "RELEASE_VERSION=$TAG_NAME" >> $GITHUB_ENV
            echo "IS_PRERELEASE=false" >> $GITHUB_ENV
            echo "使用原标签: $TAG_NAME"
          fi

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Build Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libncurses5-dev libncursesw5-dev \
          zlib1g-dev gawk git gettext libssl-dev xsltproc rsync unzip

      - name: Setup OpenWrt SDK
        run: |
          # 先删除可能存在的 sdk 目录
          rm -rf sdk
          # 下载 SDK
          wget https://downloads.openwrt.org/releases/22.03.5/targets/x86/64/openwrt-sdk-22.03.5-x86-64_gcc-11.2.0_musl.Linux-x86_64.tar.xz
          # 解压
          tar xJf openwrt-sdk-*.tar.xz
          # 重命名解压的目录为 sdk（使用通配符）
          mv openwrt-sdk-22.03.5-x86-64_gcc-11.2.0_musl.Linux-x86_64 sdk
          
      - name: Setup SDK Environment
        run: |
          cd sdk
          # 更新 feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          # 链接应用到 SDK package 目录
          ln -sf $GITHUB_WORKSPACE package/luci-app-autoupdatehosts
          
      - name: Build Package
        run: |
          cd sdk
          make defconfig
          make package/luci-app-autoupdatehosts/compile V=s

      - name: Organize IPK files
        run: |
          mkdir -p release
          find sdk/bin/packages/*/base/ -name "luci-app-autoupdatehosts*.ipk" -exec cp {} release/ \;
          find sdk/bin/packages/*/base/ -name "luci-i18n-autoupdatehosts*.ipk" -exec cp {} release/ \;

      - name: Generate Release Notes
        run: |
          echo "### LuCI App AutoUpdateHosts Release" > release.txt
          echo "包含以下文件：" >> release.txt
          ls -1 release/ >> release.txt

      - name: Create Release
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        with:
          files: release/*
          body_path: release.txt
          prerelease: ${{ env.IS_PRERELEASE == 'true' }}
          tag_name: ${{ env.RELEASE_VERSION }}
          name: ${{ env.RELEASE_VERSION }}
          generate_release_notes: true
          fail_on_unmatched_files: false
          token: ${{ secrets.REPO_TOKEN }}