<%+header%>

<style>
.preview-area {
    min-height: 400px;
    max-height: 600px;
    width: 100%;
    overflow-y: auto;
    border: 1px solid #ccc;
    padding: 10px;
    margin: 10px 0;
    display: none;
    white-space: pre;
    font-family: monospace;
    background-color: #f5f5f5;
    font-size: 14px;
    line-height: 1.5;
}
.tab-button {
    margin-right: 10px;
    margin-bottom: 20px;
}
.tab-button.active {
    background-color: #0069d6;
    color: white;
}
.tab-content {
    display: none;
}
.tab-content.active {
    display: block;
}
.main-container {
    padding: 1rem;
}
.tabs-container {
    margin-bottom: 1rem;
}
</style>

<div class="main-container">
    <h2><%:Auto Update Hosts Settings%></h2>

    <div class="tabs-container">
        <input type="button" id="tab_settings" class="cbi-button tab-button" value="<%:Settings%>" onclick="switchTab('settings')" />
        <input type="button" id="tab_log" class="cbi-button tab-button" value="<%:Log%>" onclick="switchTab('log')" />
    </div>

    <div id="settings_content" class="tab-content">
        <div class="cbi-map-descr"><%:Configure automatic hosts file updates%></div>
        <div class="cbi-section">
            <div class="cbi-section-node">
                <div class="cbi-value">
                    <label class="cbi-value-title"><%:Enable%></label>
                    <div class="cbi-value-field">
                        <input type="checkbox" id="enabled" />
                    </div>
                </div>
                
                <div class="cbi-value">
                    <label class="cbi-value-title"><%:Update Schedule%></label>
                    <div class="cbi-value-field">
                        <input type="text" id="schedule" class="cbi-input-text" />
                        <div class="cbi-value-description"><%:Cron expression format (e.g., "0 2 * * *" for 2 AM daily)%></div>
                    </div>
                </div>
                
                <div class="cbi-value">
                    <label class="cbi-value-title"><%:Hosts URLs%></label>
                    <div class="cbi-value-field">
                        <textarea id="urls" class="cbi-input-textarea" style="width: 100%; height: 100px;"></textarea>
                        <div class="cbi-value-description"><%:Enter URLs (one per line) for hosts files%></div>
                    </div>
                </div>
                
                <div class="cbi-value">
                    <div class="cbi-value-field">
                        <div id="preview" class="preview-area"></div>
                    </div>
                </div>
                
                <div class="cbi-value-field">
                    <input type="button" id="btn_view_hosts" class="btn cbi-button cbi-button-apply" value="<%:View Current Hosts%>" />
                    <input type="button" id="btn_preview_hosts" class="btn cbi-button cbi-button-apply" value="<%:Preview Hosts%>" />
                    <input type="button" id="btn_save" class="btn cbi-button cbi-button-save" value="<%:Save%>" />
                </div>
            </div>
        </div>
    </div>

    <div id="log_content" class="tab-content">
        <div class="cbi-section">
            <div class="cbi-section-node">
                <div class="cbi-value">
                    <div class="cbi-value-field">
                        <input type="button" id="log_control" class="cbi-button cbi-button-apply" value="<%:Start Log%>" onclick="toggleLog()" />
                        <input type="button" class="btn cbi-button cbi-button-remove" value="<%:Clear Log%>" onclick="clearLog()" />
                    </div>
                </div>
                <div class="cbi-value">
                    <div class="cbi-value-field">
                        <textarea id="log_textarea" style="width: 100%; height: 300px; padding: 5px; font-family: monospace;" readonly="readonly"></textarea>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">//<![CDATA[
    var previewContent = '';
    
    function loadConfig() {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '/cgi-bin/luci/admin/services/autoupdatehosts/get_config', true);
        
        xhr.onload = function() {
            if (xhr.status >= 200 && xhr.status < 300) {
                var data = JSON.parse(xhr.responseText);
                document.getElementById('enabled').checked = data.enabled === "1";
                document.getElementById('urls').value = data.urls;
                document.getElementById('schedule').value = data.schedule;
            }
        };
        
        xhr.onerror = function() {
            console.error('加载配置失败');
        };
        
        xhr.send();
    }
    
    function previewHosts() {
        var preview = document.getElementById('preview');
        preview.style.display = 'block';
        preview.textContent = '正在获取...';
        
        // 直接从输入框获取 URLs
        var urls = document.getElementById('urls').value;
        
        // 发送预览请求
        var xhr = new XMLHttpRequest();
        xhr.open('POST', '/cgi-bin/luci/admin/services/autoupdatehosts/preview', true);
        xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
        
        xhr.onload = function() {
            if (xhr.status >= 200 && xhr.status < 300) {
                var content = xhr.responseText;
                if (content) {
                    preview.textContent = content;
                    previewContent = content;
                } else {
                    preview.textContent = '# 预览内容为空';
                }
            } else {
                preview.textContent = '预览失败: ' + xhr.status;
            }
        };
        
        xhr.onerror = function() {
            preview.textContent = '预览失败：网络错误';
        };
        
        // 发送 URLs 数据
        xhr.send('urls=' + encodeURIComponent(urls));
    }
    
    function saveAll() {
        // 保存配置
        var configData = new FormData();
        var isEnabled = document.getElementById('enabled').checked;
        configData.append('enabled', isEnabled ? "1" : "0");
        configData.append('urls', document.getElementById('urls').value);
        configData.append('schedule', document.getElementById('schedule').value);
        
        var configXhr = new XMLHttpRequest();
        configXhr.open('POST', '/cgi-bin/luci/admin/services/autoupdatehosts/save_config', true);
        
        configXhr.onload = function() {
            if (configXhr.status >= 200 && configXhr.status < 300) {
                var result = JSON.parse(configXhr.responseText);
                if (result.code === 0) {
                    // 只有在启用状态下才更新 hosts 文件
                    if (isEnabled) {
                        // 配置保存成功后，更新 hosts 文件
                        var hostsXhr = new XMLHttpRequest();
                        hostsXhr.open('POST', '/cgi-bin/luci/admin/services/autoupdatehosts/save_hosts_etc', true);
                        
                        hostsXhr.onload = function() {
                            if (hostsXhr.status >= 200 && hostsXhr.status < 300) {
                                var hostsResult = JSON.parse(hostsXhr.responseText);
                                if (hostsResult.code === 0) {
                                    alert('<%:Save Success%>');
                                } else {
                                    alert(hostsResult.msg);
                                }
                            }
                        };
                        
                        hostsXhr.onerror = function() {
                            alert('更新 hosts 文件失败');
                        };
                        
                        hostsXhr.send();
                    } else {
                        // 如果是禁用状态，直接提示保存成功
                        alert('<%:Save Success%>');
                    }
                } else {
                    alert(result.msg);
                }
            }
        };
        
        configXhr.onerror = function() {
            alert('保存配置失败');
        };
        
        configXhr.send(configData);
    }
    
    var logTimer = null;
    var isLogging = false;

    function switchTab(tabName) {
        document.querySelectorAll('.tab-button').forEach(function(btn) {
            btn.classList.remove('active');
        });
        document.getElementById('tab_' + tabName).classList.add('active');

        document.querySelectorAll('.tab-content').forEach(function(content) {
            content.classList.remove('active');
        });
        document.getElementById(tabName + '_content').classList.add('active');
    }

    function toggleLog() {
        var btn = document.getElementById('log_control');
        isLogging = !isLogging;
        
        if (isLogging) {
            btn.value = '<%:Stop Log%>';
            startLogging();
        } else {
            btn.value = '<%:Start Log%>';
            stopLogging();
        }
    }

    function startLogging() {
        if (logTimer) return;
        logTimer = setInterval(fetchLog, 1000);
    }

    function stopLogging() {
        if (logTimer) {
            clearInterval(logTimer);
            logTimer = null;
        }
    }

    function clearLog() {
        document.getElementById('log_textarea').value = '';
    }

    function fetchLog() {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '/cgi-bin/luci/admin/services/autoupdatehosts/get_log', true);
        
        xhr.onload = function() {
            if (xhr.status >= 200 && xhr.status < 300) {
                var data = JSON.parse(xhr.responseText);
                if (data && data.log) {
                    var textarea = document.getElementById('log_textarea');
                    textarea.value = data.log;
                    textarea.scrollTop = textarea.scrollHeight;
                }
            }
        };
        
        xhr.onerror = function() {
            console.error('获取日志失败');
        };
        
        xhr.send();
    }

    function showCurrentHosts() {
        var preview = document.getElementById('preview');
        preview.style.display = 'block';
        preview.textContent = '正在获取...';
        
        var xhr = new XMLHttpRequest();
        xhr.open('GET', '/cgi-bin/luci/admin/services/autoupdatehosts/fetch_hosts', true);
        
        xhr.onload = function() {
            if (xhr.status >= 200 && xhr.status < 300) {
                var content = xhr.responseText;
                if (content) {
                    preview.textContent = content;
                    previewContent = content;
                } else {
                    preview.textContent = '# 当前 hosts 文件为空';
                }
            } else {
                preview.textContent = '获取 hosts 文件失败: ' + xhr.status;
            }
        };
        
        xhr.onerror = function() {
            preview.textContent = '获取 hosts 文件失败：网络错误';
        };
        
        xhr.send();
    }

    window.onload = function() {
        loadConfig();
        switchTab('settings');

        // 绑定按钮事件
        var btnViewHosts = document.getElementById('btn_view_hosts');
        if (btnViewHosts) {
            btnViewHosts.onclick = showCurrentHosts;
        }

        var btnPreviewHosts = document.getElementById('btn_preview_hosts');
        if (btnPreviewHosts) {
            btnPreviewHosts.onclick = previewHosts;
        }

        var btnSave = document.getElementById('btn_save');
        if (btnSave) {
            btnSave.onclick = saveAll;
        }
    }
//]]></script>

<%+footer%> 